{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","reusable/DocsLink.js","reusable/ProBadge.js","../node_modules/webpack/buildin/module.js","views/forms/validation-forms/ValidationForms.js"],"names":["_objectWithoutProperties","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","DocsLink","props","name","text","rest","href","className","rel","React","memo","ProBadge","children","attributes","color","module","exports","webpackPolyfill","deprecate","paths","defineProperty","enumerable","get","l","validationSchema","values","Yup","shape","firstName","min","required","lastName","userName","email","password","matches","confirmPassword","oneOf","accept","test","value","getErrorsFromValidationError","validationError","inner","reduce","errors","error","path","initialValues","onSubmit","setSubmitting","setErrors","setTimeout","alert","JSON","stringify","validateForm","formName","hasError","form","document","forms","focus","findFirstError","fieldName","Boolean","ValidationForms","validate","getValidationSchema","validateSync","abortEarly","touched","handleChange","status","dirty","handleBlur","handleSubmit","isSubmitting","isValid","handleReset","setTouched","lg","noValidate","htmlFor","type","id","placeholder","autoComplete","valid","invalid","autoFocus","onChange","onBlur","md","variant","custom","disabled","onClick","touchAll"],"mappings":"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","file":"static/js/57.a63ba09a.chunk.js","sourcesContent":["import objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import React from 'react'\nimport { CLink } from '@coreui/react'\n\nconst DocsLink = props => {\n  const {\n    name,\n    text,\n    ...rest\n  } = props\n\n  const href = name ? `https://coreui.io/react/docs/components/${name}` : props.href\n\n  return (\n    <div className=\"card-header-actions\">\n      <CLink \n        {...rest}\n        href={href}\n        rel=\"noreferrer noopener\" \n        target=\"_blank\" \n        className=\"card-header-action\"  \n      >\n        <small className=\"text-muted\">{ text || 'docs' }</small>\n      </CLink>\n    </div>\n  )\n}\n\nexport default React.memo(DocsLink)","import React from 'react'\nimport { CBadge } from '@coreui/react'\nimport PropTypes from 'prop-types'\n\nconst ProBadge = props => {\n  let { children, ...attributes } = { ...props }\n  return (\n    <CBadge\n      href=\"https://coreui.io/pro/react/\"\n      color=\"danger\"\n      target=\"_blank\"\n      rel=\"noreferrer noopener\"\n      {...attributes}\n    >\n      {children ? children : 'CoreUI Pro Component'}\n    </CBadge>\n  )\n}\n\nProBadge.propTypes = {\n  children: PropTypes.node\n}\n\nexport default React.memo(ProBadge)\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","import React from 'react'\nimport {\n  CButton,\n  CCard,\n  CCardHeader,\n  CCardBody,\n  CCol,\n  CForm,\n  CInvalidFeedback,\n  CInputCheckbox,\n  CFormGroup,\n  CLabel,\n  CInput,\n  CRow\n} from '@coreui/react'\nimport { ProBadge, DocsLink } from 'src/reusable'\n\nimport { Formik } from 'formik'\nimport * as Yup from 'yup'\n\nconst validationSchema = function (values) {\n  return Yup.object().shape({\n    firstName: Yup.string()\n    .min(2, `First name has to be at least 2 characters`)\n    .required('First name is required'),\n    lastName: Yup.string()\n    .min(1, `Last name has to be at least 1 character`)\n    .required('Last name is required'),\n    userName: Yup.string()\n    .min(5, `Username has to be at least 5 characters`)\n    .required('Username is required'),\n    email: Yup.string()\n    .email('Invalid email address')\n    .required('Email is required!'),\n    password: Yup.string()\n    .min(6, `Password has to be at least ${6} characters!`)\n    .matches(/(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{6,}/, 'Password must contain: numbers, uppercase and lowercase letters\\n')\n    .required('Password is required'),\n    confirmPassword: Yup.string()\n    .oneOf([values.password], 'Passwords must match')\n    .required('Password confirmation is required'),\n    accept: Yup.bool()\n    .required('* required')\n    .test('accept', 'You have to accept our Terms and Conditions!', value => value === true),\n  })\n}\n\nconst validate = (getValidationSchema) => {\n  return (values) => {\n    const validationSchema = getValidationSchema(values)\n    try {\n      validationSchema.validateSync(values, { abortEarly: false })\n      return {}\n    } catch (error) {\n      return getErrorsFromValidationError(error)\n    }\n  }\n}\n\nconst getErrorsFromValidationError = (validationError) => {\n  const FIRST_ERROR = 0\n  return validationError.inner.reduce((errors, error) => {\n    return {\n      ...errors,\n      [error.path]: error.errors[FIRST_ERROR],\n    }\n  }, {})\n}\n\nconst initialValues = {\n  firstName: \"\",\n  lastName: \"\",\n  userName: \"\",\n  email: \"\",\n  password: \"\",\n  confirmPassword: \"\",\n  accept: false\n}\n\nconst onSubmit = (values, { setSubmitting, setErrors }) => {\n  setTimeout(() => {\n    alert(JSON.stringify(values, null, 2))\n    // console.log('User has been successfully saved!', values)\n    setSubmitting(false)\n  }, 2000)\n}\n\nconst findFirstError = (formName, hasError) => {\n  const form = document.forms[formName]\n  for (let i = 0; i < form.length; i++) {\n    if (hasError(form[i].name)) {\n      form[i].focus()\n      break\n    }\n  }\n}\n\nconst validateForm = (errors) => {\n  findFirstError('simpleForm', (fieldName) => {\n    return Boolean(errors[fieldName])\n  })\n}\n\nconst touchAll = (setTouched, errors) => {\n  setTouched({\n    firstName: true,\n    lastName: true,\n    userName: true,\n    email: true,\n    password: true,\n    confirmPassword: true,\n    accept: true\n  })\n  validateForm(errors)\n}\n\nconst ValidationForms = () =>  {\n  return (\n    <CCard>\n      <CCardHeader>\n        Form Validation\n        <ProBadge/>\n        <DocsLink href=\"https://github.com/jaredpalmer/formik\"/>\n      </CCardHeader>\n      <CCardBody>\n        <a \n          href=\"https://github.com/jaredpalmer/formik\" \n          target=\"_blank\" rel=\"noreferrer noopener\"\n        >Formik</a> <cite>Build forms in React, without the tears</cite> with \n          \n        <a \n          href=\"https://github.com/jquense/yup\" \n          target=\"_blank\" \n          rel=\"noreferrer noopener\"\n        >Yup</a> <cite>Dead simple Object schema\n        validation</cite>\n        <hr />\n        <Formik\n          initialValues={initialValues}\n          validate={validate(validationSchema)}\n          onSubmit={onSubmit}\n        >\n          {\n            ({\n              values,\n              errors,\n              touched,\n              status,\n              dirty,\n              handleChange,\n              handleBlur,\n              handleSubmit,\n              isSubmitting,\n              isValid,\n              handleReset,\n              setTouched\n            }) => (\n              <CRow>\n                <CCol lg=\"6\">\n                  <CForm onSubmit={handleSubmit} noValidate name='simpleForm'>\n                    <CFormGroup>\n                      <CLabel htmlFor=\"firstName\">First Name</CLabel>\n                      <CInput type=\"text\"\n                              name=\"firstName\"\n                              id=\"firstName\"\n                              placeholder=\"First Name\"\n                              autoComplete=\"given-name\"\n                              valid={!errors.firstName}\n                              invalid={touched.firstName && !!errors.firstName}\n                              autoFocus={true}\n                              required\n                              onChange={handleChange}\n                              onBlur={handleBlur}\n                              value={values.firstName} />\n                      <CInvalidFeedback>{errors.firstName}</CInvalidFeedback>\n                    </CFormGroup>\n                    <CFormGroup>\n                      <CLabel htmlFor=\"lastName\">Last Name</CLabel>\n                      <CInput type=\"text\"\n                              name=\"lastName\"\n                              id=\"lastName\"\n                              placeholder=\"Last Name\"\n                              autoComplete=\"family-name\"\n                              valid={!errors.lastName}\n                              invalid={touched.lastName && !!errors.lastName}\n                              required\n                              onChange={handleChange}\n                              onBlur={handleBlur}\n                              value={values.lastName} />\n                      <CInvalidFeedback>{errors.lastName}</CInvalidFeedback>\n                    </CFormGroup>\n                    <CFormGroup>\n                      <CLabel htmlFor=\"userName\">User Name</CLabel>\n                      <CInput type=\"text\"\n                              name=\"userName\"\n                              id=\"userName\"\n                              placeholder=\"User Name\"\n                              autoComplete=\"username\"\n                              valid={!errors.userName}\n                              invalid={touched.userName && !!errors.userName}\n                              required\n                              onChange={handleChange}\n                              onBlur={handleBlur}\n                              value={values.userName} />\n                      <CInvalidFeedback>{errors.userName}</CInvalidFeedback>\n                    </CFormGroup>\n                    <CFormGroup>\n                      <CLabel htmlFor=\"email\">Email</CLabel>\n                      <CInput type=\"email\"\n                              name=\"email\"\n                              id=\"email\"\n                              placeholder=\"Email\"\n                              autoComplete=\"email\"\n                              valid={!errors.email}\n                              invalid={touched.email && !!errors.email}\n                              required\n                              onChange={handleChange}\n                              onBlur={handleBlur}\n                              value={values.email} />\n                      <CInvalidFeedback>{errors.email}</CInvalidFeedback>\n                    </CFormGroup>\n                    <CRow>\n                      <CCol md={6}>\n                        <CFormGroup>\n                          <CLabel htmlFor=\"password\">Password</CLabel>\n                          <CInput type=\"password\"\n                                  name=\"password\"\n                                  id=\"password\"\n                                  placeholder=\"Password\"\n                                  autoComplete=\"new-password\"\n                                  valid={!errors.password}\n                                  invalid={touched.password && !!errors.password}\n                                  required\n                                  onChange={handleChange}\n                                  onBlur={handleBlur}\n                                  value={values.password} />\n                          {/*<CInvalidFeedback>Required password containing at least: number, uppercase and lowercase letter, 8 characters</CInvalidFeedback>*/}\n                          <CInvalidFeedback>{errors.password}</CInvalidFeedback>\n                        </CFormGroup>\n                      </CCol>\n                      <CCol md={6}>\n                        <CFormGroup>\n                          <CLabel htmlFor=\"confirmPassword\">Password</CLabel>\n                          <CInput type=\"password\"\n                                  name=\"confirmPassword\"\n                                  id=\"confirmPassword\"\n                                  placeholder=\"Confirm password\"\n                                  autoComplete=\"new-password\"\n                                  valid={!errors.confirmPassword}\n                                  invalid={touched.confirmPassword && !!errors.confirmPassword}\n                                  required\n                                  onChange={handleChange}\n                                  onBlur={handleBlur}\n                                  value={values.confirmPassword} />\n                          <CInvalidFeedback>{errors.confirmPassword}</CInvalidFeedback>\n                        </CFormGroup>\n                      </CCol>\n                    </CRow>\n                    <CFormGroup variant=\"custom-checkbox\" className=\"pb-3\">\n                      <CInputCheckbox\n                        custom\n                        id=\"accept\"\n                        required\n                        valid={!errors.accept}\n                        invalid={touched.accept && !!errors.accept}\n                        onChange={handleChange}\n                        onBlur={handleBlur} \n                      />\n                      <CLabel variant=\"custom-checkbox\" htmlFor=\"accept\">\n                        I accept the terms of use\n                      </CLabel>\n                      <CInvalidFeedback>{errors.accept}</CInvalidFeedback>\n                    </CFormGroup>\n                    <CFormGroup>\n                      <CButton type=\"submit\" color=\"primary\" className=\"mr-1\" disabled={isSubmitting || !isValid}>{isSubmitting ? 'Wait...' : 'Submit'}</CButton>\n                      <CButton type=\"button\" color=\"success\" className=\"mr-1\" onClick={() => touchAll(setTouched, errors)}  disabled={isValid}>Validate</CButton>\n                      <CButton type=\"reset\" color=\"danger\" className=\"mr-1\" onClick={handleReset}>Reset</CButton>\n                    </CFormGroup>\n                  </CForm>\n                </CCol>\n                <CCol lg=\"6\">\n                  <CCard color={isValid ? 'gradient-info' : 'gradient-secondary'}>\n                    <CCardBody>\n                      <pre>values: {JSON.stringify(values, null, 2)}</pre>\n                      <pre>errors: {JSON.stringify(errors, null, 2)}</pre>\n                      <pre>touched: {JSON.stringify(touched, null, 2)}</pre>\n                    </CCardBody>\n                  </CCard>\n                </CCol>\n              </CRow>\n            )}\n        </Formik>\n      </CCardBody>\n    </CCard>\n  )\n}\n\nexport default ValidationForms\n"],"sourceRoot":""}