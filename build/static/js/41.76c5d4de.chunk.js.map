{"version":3,"sources":["components/clients/common/Loading/index.jsx","../node_modules/webpack/buildin/module.js","containers/clients/Login/index.jsx"],"names":["LoadingContainer","props","className","color","style","width","height","module","exports","webpackPolyfill","deprecate","paths","children","Object","defineProperty","enumerable","get","l","i","ClientLogin","history","useHistory","dispatch","useDispatch","selector","useSelector","state","auth","useEffect","resetData","a","isLogined","user","toast","success","role","push","error","message","validationSchema","yup","email","required","password","min","formik","useFormik","initialValues","onSubmit","values","console","log","loginUserApi","loading","handleSubmit","method","to","htmlFor","type","name","autoComplete","onChange","handleChange","value","errors","touched","classID"],"mappings":"sJAAA,iCAaeA,IARU,SAACC,GACxB,OACE,qBAAKC,UAAU,mBAAf,SACE,cAAC,KAAD,CAAUC,MAAM,UAAUC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,c,wCCRhEC,EAAOC,QAAU,SAASD,GAoBzB,OAnBKA,EAAOE,kBACXF,EAAOG,UAAY,aACnBH,EAAOI,MAAQ,GAEVJ,EAAOK,WAAUL,EAAOK,SAAW,IACxCC,OAAOC,eAAeP,EAAQ,SAAU,CACvCQ,YAAY,EACZC,IAAK,WACJ,OAAOT,EAAOU,KAGhBJ,OAAOC,eAAeP,EAAQ,KAAM,CACnCQ,YAAY,EACZC,IAAK,WACJ,OAAOT,EAAOW,KAGhBX,EAAOE,gBAAkB,GAEnBF,I,6KCgHOY,UA5GK,SAAClB,GACnB,IAAMmB,EAAUC,cACVC,EAAWC,cACXC,EAAWC,aAAY,SAACC,GAAD,OAAWA,EAAMC,QAE9CC,qBAAU,WACR,OAAO,WACLN,EAASO,kBAEV,CAACP,IAEJM,oBAAS,sBAAC,sBAAAE,EAAA,0DACmB,IAAvBN,EAASO,YAAsBP,EAASQ,KADpC,iCAEAC,IAAMC,QAAQ,uBAFd,UAGqB,UAAvBV,EAASQ,KAAKG,KAHZ,gCAIEf,EAAQgB,KAAK,UAJf,+CAMEhB,EAAQgB,KAAK,cANf,gCAQGZ,EAASa,OAClBJ,IAAMI,MAAMb,EAASa,MAAMC,SATrB,4CAWP,CAACd,EAAUJ,EAASE,IAEvB,IAAMiB,EAAmBC,IAAW,CAClCC,MAAOD,IACG,4BACPC,MAAM,yBACNC,SAAS,qBACZC,SAAUH,IACA,8BACPI,IAAI,EAAG,wBACPF,SAAS,0BAGRG,EAASC,YAAU,CACvBC,cAAe,CACbN,MAAO,GACPE,SAAU,IAEZJ,mBACAS,SAAU,SAACC,GACTC,QAAQC,IAAI,WAAYF,GACxB3B,EAAS8B,YAAaH,OAI1B,OACE,qBAAK/C,UAAU,YAAf,SACGsB,EAAS6B,QACR,cAAC,IAAD,IAEA,cAAC,IAAD,UACE,qBAAKnD,UAAU,UAAf,SACE,eAAC,IAAD,CAAO8C,SAAUH,EAAOS,aAAcC,OAAO,OAA7C,UACE,wCACA,mDACmB,cAAC,IAAD,CAAMC,GAAG,YAAT,wBAGnB,eAAC,IAAD,WACE,cAAC,KAAD,CAAQC,QAAQ,WAAhB,mBACA,cAAC,IAAD,CACEC,KAAK,QACLC,KAAK,QACLC,aAAa,QACbC,SAAUhB,EAAOiB,aACjBC,MAAOlB,EAAOI,OAAOR,QAEtBI,EAAOmB,OAAOvB,OAASI,EAAOoB,QAAQxB,OACrC,cAAC,IAAD,CAAWvC,UAAU,uBAArB,SACG2C,EAAOmB,OAAOvB,WAKrB,eAAC,IAAD,WACE,cAAC,KAAD,CAAQgB,QAAQ,WAAhB,sBACA,cAAC,IAAD,CACEC,KAAK,WACLC,KAAK,WACLE,SAAUhB,EAAOiB,aACjBC,MAAOlB,EAAOI,OAAON,WAEtBE,EAAOmB,OAAOrB,UAAYE,EAAOoB,QAAQtB,UACxC,cAAC,IAAD,CAAWzC,UAAU,uBAArB,SACG2C,EAAOmB,OAAOrB,cAKrB,cAAC,IAAD,CAAMzC,UAAU,iBAAiBsD,GAAG,mBAApC,8BAIA,qBAAKtD,UAAU,UAAf,SACE,cAAC,IAAD,CAASwD,KAAK,SAASvD,MAAM,UAAU+D,QAAQ,WAA/C","file":"static/js/41.76c5d4de.chunk.js","sourcesContent":["import React from \"react\";\nimport './index.scss'\n\nimport { CSpinner } from \"@coreui/react\";\n\nconst LoadingContainer = (props) => {\n  return (\n    <div className=\"loadingContainer\">\n      <CSpinner color=\"primary\" style={{ width: \"4rem\", height: \"4rem\" }} />\n    </div>\n  );\n};\n\nexport default LoadingContainer;\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect } from \"react\";\nimport \"./index.scss\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport * as yup from \"yup\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useFormik } from \"formik\";\nimport { toast } from \"react-toastify\";\n\n// actions\nimport { loginUserApi, resetData } from \"../../../stores/reducers/authSlice\";\n// ui\nimport {\n  CContainer,\n  CForm,\n  CFormGroup,\n  CLabel,\n  CInput,\n  CButton,\n  CFormText,\n} from \"@coreui/react\";\n// components\nimport LoadingContainer from \"../../../components/clients/common/Loading\";\n\nconst ClientLogin = (props) => {\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const selector = useSelector((state) => state.auth);\n\n  useEffect(() => {\n    return () => {\n      dispatch(resetData());\n    };\n  }, [dispatch]);\n\n  useEffect(async () => {\n    if (selector.isLogined === true && selector.user) {\n      await toast.success(\"Login successfully!\");\n      if (selector.user.role === \"admin\") {\n        await history.push(\"/admin\");\n      } else {\n        await history.push(\"/dashboard\");\n      }\n    } else if (selector.error) {\n      toast.error(selector.error.message);\n    }\n  }, [selector, history, dispatch]);\n\n  const validationSchema = yup.object({\n    email: yup\n      .string(\"Please enter your email.\")\n      .email(\"Invalid email format.\")\n      .required(\"Email is required\"),\n    password: yup\n      .string(\"Please enter your password\")\n      .min(6, \"Minimum 6 characters\")\n      .required(\"Password is required\"),\n  });\n\n  const formik = useFormik({\n    initialValues: {\n      email: \"\",\n      password: \"\",\n    },\n    validationSchema,\n    onSubmit: (values) => {\n      console.log(\"values: \", values);\n      dispatch(loginUserApi(values));\n    },\n  });\n\n  return (\n    <div className=\"loginPage\">\n      {selector.loading ? (\n        <LoadingContainer />\n      ) : (\n        <CContainer>\n          <div className=\"content\">\n            <CForm onSubmit={formik.handleSubmit} method=\"post\">\n              <h1>Log In</h1>\n              <h4>\n                New to this site?<Link to=\"/register\">Sign Up</Link>\n              </h4>\n\n              <CFormGroup>\n                <CLabel htmlFor=\"nf-email\">Email</CLabel>\n                <CInput\n                  type=\"email\"\n                  name=\"email\"\n                  autoComplete=\"email\"\n                  onChange={formik.handleChange}\n                  value={formik.values.email}\n                />\n                {formik.errors.email && formik.touched.email && (\n                  <CFormText className=\"help-block textError\">\n                    {formik.errors.email}\n                  </CFormText>\n                )}\n              </CFormGroup>\n\n              <CFormGroup>\n                <CLabel htmlFor=\"nf-email\">Password</CLabel>\n                <CInput\n                  type=\"password\"\n                  name=\"password\"\n                  onChange={formik.handleChange}\n                  value={formik.values.password}\n                />\n                {formik.errors.password && formik.touched.password && (\n                  <CFormText className=\"help-block textError\">\n                    {formik.errors.password}\n                  </CFormText>\n                )}\n              </CFormGroup>\n\n              <Link className=\"forgotPassword\" to=\"/forgot-password\">\n                Forgot password?\n              </Link>\n\n              <div className=\"actions\">\n                <CButton type=\"submit\" color=\"primary\" classID=\"btnLogin\">\n                  Log In\n                </CButton>\n              </div>\n            </CForm>\n          </div>\n        </CContainer>\n      )}\n    </div>\n  );\n};\n\nexport default ClientLogin;\n"],"sourceRoot":""}