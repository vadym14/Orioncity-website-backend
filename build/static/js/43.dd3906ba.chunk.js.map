{"version":3,"sources":["components/clients/common/Loading/index.jsx","../node_modules/webpack/buildin/module.js","containers/admin/Users/EditUser/index.jsx"],"names":["LoadingContainer","props","className","color","style","width","height","module","exports","webpackPolyfill","deprecate","paths","children","Object","defineProperty","enumerable","get","l","i","statusOptions","value","label","roleOptions","EditUser","history","useHistory","id","useParams","dispatch","useDispatch","useSelector","state","users","isUpdatedUserDetail","error","loading","userDetail","console","log","validationSchema","yup","email","required","password","phone","firstName","lastName","useEffect","getUserDetailApi","toast","success","resetData","goBack","data","handleBack","initialValues","status","role","onSubmit","values","a","updateUserApi","errors","touched","handleChange","handleSubmit","method","md","type","name","onChange","map","el","onClick"],"mappings":"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","file":"static/js/43.dd3906ba.chunk.js","sourcesContent":["import React from \"react\";\nimport './index.scss'\n\nimport { CSpinner } from \"@coreui/react\";\n\nconst LoadingContainer = (props) => {\n  return (\n    <div className=\"loadingContainer\">\n      <CSpinner color=\"primary\" style={{ width: \"4rem\", height: \"4rem\" }} />\n    </div>\n  );\n};\n\nexport default LoadingContainer;\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","import React, { useEffect } from \"react\";\nimport \"./index.scss\";\nimport * as yup from \"yup\";\nimport { Formik } from \"formik\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { toast } from \"react-toastify\";\nimport { useHistory, useParams } from \"react-router-dom\";\n\n// actions\nimport {\n  resetData,\n  getUserDetailApi,\n  updateUserApi,\n} from \"../../../../stores/reducers/userSlice\";\n\nimport {\n  CForm,\n  CFormGroup,\n  CFormText,\n  CLabel,\n  CInput,\n  CCard,\n  CCardHeader,\n  CCardBody,\n  CRow,\n  CCol,\n  CButton,\n  CSelect,\n} from \"@coreui/react\";\n\n// components\nimport LoadingContainer from \"../../../../components/clients/common/Loading\";\n\nconst statusOptions = [\n  {\n    value: \"inactive\",\n    label: \"Inactive\",\n  },\n  {\n    value: \"active\",\n    label: \"Active\",\n  },\n  {\n    value: \"blocked\",\n    label: \"Blocked\",\n  },\n];\n\nconst roleOptions = [\n  {\n    value: \"admin\",\n    label: \"Admin\",\n  },\n  {\n    value: \"investor\",\n    label: \"Investor\",\n  },\n];\n\nconst EditUser = (props) => {\n  const history = useHistory();\n  const { id } = useParams();\n  const dispatch = useDispatch();\n  const { isUpdatedUserDetail, error, loading, userDetail } = useSelector(\n    (state) => state.users\n  );\n\n  console.log('isUpdatedUserDetail: ', isUpdatedUserDetail)\n\n  const validationSchema = yup.object({\n    email: yup\n      .string(\"Enter your email\")\n      .email(\"Email invalid\")\n      .required(\"Email is required\"),\n    password: yup.string(\"\"),\n    phone: yup.string(),\n    firstName: yup.string(),\n    lastName: yup.string(),\n  });\n\n  useEffect(() => {\n    if (!userDetail) {\n      dispatch(getUserDetailApi(id));\n    }\n    // return () => {\n    //   dispatch(resetData());\n    // };\n  }, [id, dispatch, userDetail]);\n\n  useEffect(() => {\n    if (isUpdatedUserDetail) {\n      toast.success(\"Updated user successfully\");\n      // formik resetForm();\n      dispatch(resetData());\n      history.goBack();\n    }\n    return () => {\n      dispatch(resetData());\n    };\n  }, [isUpdatedUserDetail, dispatch, history]);\n\n  useEffect(() => {\n    if (error) {\n      toast.error(error.data);\n      dispatch(resetData());\n    }\n    return () => {\n      dispatch(resetData());\n    };\n  }, [dispatch, error]);\n\n  const handleBack = () => {\n    history.goBack();\n  };\n\n  // const onSubmitData = (values) => {\n  //   dispatch(updateUserApi({ id, values }));\n  // };\n\n  return (\n    <div className=\"addUser\">\n      {loading === false && userDetail !== null ? (\n        <Formik\n          initialValues={{\n            email: userDetail.email || \"\",\n            password: \"\",\n            phone: userDetail.phone || \"\",\n            firstName: userDetail.firstName || \"\",\n            lastName: userDetail.lastName || \"\",\n            status: userDetail.status || \"\",\n            role: userDetail.role || \"\",\n          }}\n          validationSchema={validationSchema}\n          onSubmit={async (values) => {\n            // onSubmitData(values);\n\n            await dispatch(updateUserApi({ id, values }));\n          }}\n        >\n          {({ values, errors, touched, handleChange, handleSubmit }) => (\n            <CForm onSubmit={handleSubmit} method=\"put\">\n              <CCard>\n                <CCardHeader>Add User</CCardHeader>\n                <CCardBody>\n                  <CRow>\n                    <CCol md={6}>\n                      <CFormGroup>\n                        <CLabel>Email</CLabel>\n                        <CInput\n                          type=\"emai\"\n                          name=\"email\"\n                          value={values.email}\n                          onChange={handleChange}\n                        />\n                        {errors.email && touched.email && (\n                          <CFormText className=\"help-block textError\">\n                            {errors.email}\n                          </CFormText>\n                        )}\n                      </CFormGroup>\n                    </CCol>\n\n                    <CCol md={6}>\n                      <CFormGroup>\n                        <CLabel>Password</CLabel>\n                        <CInput\n                          type=\"text\"\n                          name=\"password\"\n                          value={values.password}\n                          onChange={handleChange}\n                        />\n                        {errors.password && touched.password && (\n                          <CFormText className=\"help-block textError\">\n                            {errors.password}\n                          </CFormText>\n                        )}\n                      </CFormGroup>\n                    </CCol>\n\n                    <CCol md={6}>\n                      <CFormGroup>\n                        <CLabel>First Name</CLabel>\n                        <CInput\n                          type=\"text\"\n                          name=\"firstName\"\n                          value={values.firstName}\n                          onChange={handleChange}\n                        />\n                      </CFormGroup>\n                    </CCol>\n\n                    <CCol md={6}>\n                      <CFormGroup>\n                        <CLabel>Last Name</CLabel>\n                        <CInput\n                          type=\"text\"\n                          name=\"lastName\"\n                          value={values.lastName}\n                          onChange={handleChange}\n                        />\n                      </CFormGroup>\n                    </CCol>\n\n                    <CCol md={6}>\n                      <CFormGroup>\n                        <CLabel>Phone</CLabel>\n                        <CInput\n                          type=\"text\"\n                          name=\"phone\"\n                          value={values.phone}\n                          onChange={handleChange}\n                        />\n                      </CFormGroup>\n                    </CCol>\n\n                    <CCol md={6}>\n                      <CFormGroup>\n                        <CLabel>Status</CLabel>\n                        <CSelect\n                          name=\"status\"\n                          value={values.status}\n                          onChange={handleChange}\n                        >\n                          {statusOptions.map((el, i) => (\n                            <option key={i} value={el.value}>\n                              {el.label}\n                            </option>\n                          ))}\n                        </CSelect>\n                      </CFormGroup>\n                    </CCol>\n\n                    <CCol md={6}>\n                      <CFormGroup>\n                        <CLabel>Role</CLabel>\n                        <CSelect\n                          name=\"role\"\n                          value={values.role}\n                          onChange={handleChange}\n                        >\n                          {roleOptions.map((el, i) => (\n                            <option key={i} value={el.value}>\n                              {el.label}\n                            </option>\n                          ))}\n                        </CSelect>\n                      </CFormGroup>\n                    </CCol>\n\n                    <CCol md={12}>\n                      <div className=\"actions\">\n                        <CButton color=\"danger\" onClick={handleBack}>\n                          Back\n                        </CButton>\n                        <CButton type=\"submit\" color=\"success\">\n                          Save\n                        </CButton>\n                      </div>\n                    </CCol>\n                  </CRow>\n                </CCardBody>\n              </CCard>\n            </CForm>\n          )}\n        </Formik>\n      ) : (\n        <LoadingContainer />\n      )}\n    </div>\n  );\n};\n\nexport default EditUser;\n"],"sourceRoot":""}